import numpy as np
from collections import Counter

# Step 1: Training data (Height, Weight)
X_train = np.array([
    [160, 55],
    [170, 65],
    [180, 80],
    [190, 90]
])

# Labels: 0 = Short, 1 = Tall
y_train = np.array([0, 0, 1, 1])

# Step 2: Euclidean distance function
def euclidean_dist(x1, x2):
    return np.sqrt(np.sum((x1 - x2) ** 2))

# Step 3: KNN Prediction
def knn_predict(X_train, y_train, X_test, k=3):
    # Compute distances
    distances = [euclidean_dist(X_test, x_train) for x_train in X_train]
    
    # Get indices of k nearest neighbors
    k_indices = np.argsort(distances)[:k]
    
    # Get labels of k nearest neighbors
    k_nearest_labels = [y_train[i] for i in k_indices]
    
    # Majority vote
    most_common = Counter(k_nearest_labels).most_common(1)
    return most_common[0][0]

# Step 4: Predict for a new input
X_new = np.array([185, 77])
prediction = knn_predict(X_train, y_train, X_new, k=3)

print("Predicted class for", X_new, "is:", prediction)
