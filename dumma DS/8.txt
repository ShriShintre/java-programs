from sklearn import preprocessing
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score

Color  = ['Red', 'Red', 'Red', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Red', 'Red']
Type   = ['Sports', 'Sports', 'Sports', 'Sports', 'SUV', 'SUV', 'SUV', 'SUV', 'Sports', 'SUV']
Origin = ['Domestic', 'Domestic', 'Domestic', 'Domestic', 'Imported', 'Imported', 'Imported', 'Domestic', 'Imported', 'Imported']
Stolen = ['Yes', 'No', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'Yes']

le_color = preprocessing.LabelEncoder()
le_type = preprocessing.LabelEncoder()
le_origin = preprocessing.LabelEncoder()
le_stolen = preprocessing.LabelEncoder()

encoded_color  = le_color.fit_transform(Color)
encoded_type   = le_type.fit_transform(Type)
encoded_origin = le_origin.fit_transform(Origin)
encoded_stolen = le_stolen.fit_transform(Stolen)

print("Encoded Color:", encoded_color)
print("Encoded Type:", encoded_type)
print("Encoded Origin:", encoded_origin)
print("Encoded Stolen:", encoded_stolen)

features = list(zip(encoded_color, encoded_type, encoded_origin))

model = BernoulliNB()
model.fit(features, encoded_stolen)

predicted = model.predict(features)
print("\nPredicted Labels:", predicted)

accuracy = accuracy_score(encoded_stolen, predicted)
print("Model Accuracy:", accuracy)

test_color  = le_color.transform(['Red'])[0]
test_type   = le_type.transform(['SUV'])[0]
test_origin = le_origin.transform(['Domestic'])[0]

test_sample = [[test_color, test_type, test_origin]]
predicted_label = model.predict(test_sample)

print("\nTest Sample: [Red, SUV, Domestic]")
print("Predicted Class:", le_stolen.inverse_transform(predicted_label)[0])




#csv file 


import pandas as pd
from sklearn import preprocessing
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score

data = pd.read_csv("cars.csv")
print("\nDataset:\n", data.head())

le_color = preprocessing.LabelEncoder()
le_type = preprocessing.LabelEncoder()
le_origin = preprocessing.LabelEncoder()
le_stolen = preprocessing.LabelEncoder()

data['Color']  = le_color.fit_transform(data['Color'])
data['Type']   = le_type.fit_transform(data['Type'])
data['Origin'] = le_origin.fit_transform(data['Origin'])
data['Stolen'] = le_stolen.fit_transform(data['Stolen'])

features = data[['Color', 'Type', 'Origin']]
labels   = data['Stolen']

model = BernoulliNB()
model.fit(features, labels)

predicted = model.predict(features)
print("\nPredicted Labels:", predicted.tolist())

accuracy = accuracy_score(labels, predicted)
print("Model Accuracy:", accuracy)

test_color  = le_color.transform(['Yellow'])[0]
test_type   = le_type.transform(['Sports'])[0]
test_origin = le_origin.transform(['Imported'])[0]

test_sample = [[test_color, test_type, test_origin]]
predicted_label = model.predict(test_sample)

print("\nTest Sample: Yellow, Sports, Imported")
print("Predicted Class:", le_stolen.inverse_transform(predicted_label)[0])
